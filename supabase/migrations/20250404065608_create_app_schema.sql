-- 1. Create Profiles table (linked to auth.users)
create table profiles (
  id uuid references auth.users(id) on delete cascade primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  website text,
  constraint username_length check (char_length(username) >= 3)
);

-- Function to automatically create a profile entry when a new user signs up
-- Ensure 'uuid-ossp' extension is enabled in Supabase
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, username)
  values (new.id, new.email); -- Use email as default username
  return new;
end;
$$;

-- Trigger to call the function after a new user is inserted into auth.users
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- 2. Create Books table
create table books (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default now(),
  title text not null,
  author text,
  isbn text, 
  cover_image_url text
);

-- 3. Create Book Logs table
create table book_logs (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles(id) on delete cascade not null,
  book_id bigint references public.books(id) on delete cascade not null,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now(),
  rating smallint,
  review_text text,
  read_status text default 'read',
  constraint rating_check check (rating >= 0 and rating <= 10),
  constraint unique_user_book unique (user_id, book_id)
);

-- 4. Create Log Notes table
create table log_notes (
  id bigint generated by default as identity primary key,
  log_id bigint references public.book_logs(id) on delete cascade not null,
  user_id uuid references public.profiles(id) on delete cascade not null,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now(),
  chapter text null,
  note_text text not null
);

-- 5. Create Log Chapters table
create table log_chapters (
  id bigint generated by default as identity primary key,
  log_id bigint references public.book_logs(id) on delete cascade not null,
  user_id uuid references public.profiles(id) on delete cascade not null,
  created_at timestamp with time zone default now(),
  chapter_number integer null,
  chapter_title text null,
  finished_at timestamp with time zone null
);

-- Add Indexes
create index idx_book_logs_user_id on book_logs(user_id);
create index idx_book_logs_book_id on book_logs(book_id);
create index idx_books_title on books(title);
create index idx_log_notes_log_id on log_notes(log_id);
create index idx_log_notes_user_id on log_notes(user_id);
create index idx_log_chapters_log_id on log_chapters(log_id);
create index idx_log_chapters_user_id on log_chapters(user_id);

-- Enable Row Level Security (RLS) on all tables
alter table profiles enable row level security;
alter table books enable row level security;
alter table book_logs enable row level security;
alter table log_notes enable row level security;
alter table log_chapters enable row level security;

-- Policies for Profiles:
create policy "Public profiles are viewable by everyone." on profiles for select using ( true );
create policy "Users can insert their own profile." on profiles for insert with check ( auth.uid() = id );
create policy "Users can update own profile." on profiles for update using ( auth.uid() = id );

-- Policies for Books:
create policy "Books are viewable by authenticated users." on books for select using ( auth.role() = 'authenticated' );
create policy "Authenticated users can insert books." on books for insert with check ( auth.role() = 'authenticated' );
-- Add update/delete policies as needed later

-- Policies for Book Logs:
create policy "Users can view their own book logs." on book_logs for select using ( auth.uid() = user_id );
create policy "Users can insert their own book logs." on book_logs for insert with check ( auth.uid() = user_id );
create policy "Users can update their own book logs." on book_logs for update using ( auth.uid() = user_id );
create policy "Users can delete their own book logs." on book_logs for delete using ( auth.uid() = user_id );

-- Policies for Log Notes:
create policy "Users can view their own log notes." on log_notes for select using (auth.uid() = user_id);
create policy "Users can insert their own log notes." on log_notes for insert with check (auth.uid() = user_id);
create policy "Users can update their own log notes." on log_notes for update using (auth.uid() = user_id);
create policy "Users can delete their own log notes." on log_notes for delete using (auth.uid() = user_id);

-- Policies for Log Chapters:
create policy "Users can view their own chapter logs." on log_chapters for select using (auth.uid() = user_id);
create policy "Users can insert their own chapter logs." on log_chapters for insert with check (auth.uid() = user_id);
create policy "Users can update their own chapter logs." on log_chapters for update using (auth.uid() = user_id);
create policy "Users can delete their own chapter logs." on log_chapters for delete using (auth.uid() = user_id);
